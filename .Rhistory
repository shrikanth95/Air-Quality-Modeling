noise <- c()
for(day in dates){
conc <- read.csv(paste('ExperimentData/E15_sim_noise_parameters/windData_', day,'.csv',sep = ""), sep = ";", header = TRUE)
noise <- c(noise , mean.ws$x-conc$x)
}
hist(noise)
fit <- fitdistr(noise, "normal")
para <- fit$estimate
fit <- fitdistr(noise, "normal")
noise
write.csv(sea$wspeed, file = 'ExperimentData/E16_worstcase/main_ws_sea_ds=1.csv', row.names = FALSE)
write.csv(master$wd, file = 'ExperimentData/E16_worstcase/main_wd_sea_ds=1.csv', row.names = FALSE)
write.csv(master$hour, file = 'ExperimentData/E16_worstcase/timeIndex1.csv', row.names = FALSE)
write.csv(sea$wspeed, file = 'ExperimentData/E15_sim_noise_parameters/main_ws_sea_ds=1.csv', row.names = FALSE)
write.csv(master$wd, file = 'ExperimentData/E15_sim_noise_parameters/main_wd_sea_ds=1.csv', row.names = FALSE)
write.csv(master$hour, file = 'ExperimentData/E15_sim_noise_parameters/timeIndex1.csv', row.names = FALSE)
mean.ws <- read.csv('ExperimentData/E15_sim_noise_parameters/main_ws_sea_ds=1.csv', sep = ";", header = TRUE)
noise <- c()
for(day in dates){
conc <- read.csv(paste('ExperimentData/E15_sim_noise_parameters/windData_', day,'.csv',sep = ""), sep = ";", header = TRUE)
noise <- c(noise , mean.ws$x-conc$x)
}
hist(noise)
fit <- fitdistr(noise, "normal")
para <- fit$estimate
#         mean            sd
#-0.0002000485  0.9886248515
p2 <- {hist(noise,probability = TRUE,xlab = "Concentrations")#,breaks = seq(min(df.new$desea), max(df.new$desea), 0.2))
curve(dnorm(x, para[1], para[2]), col = 2, add = TRUE )}
print(para)
write.csv(sea$wd, file = 'ExperimentData/E15_sim_noise_parameters/main_wd_sea_ds=1.csv', row.names = FALSE)
vehicle.counts <- read.csv('Raw Sensor Data/Ecity_Vehicle_data.csv', sep = ";")
VPH.df <- vehicle.counts[c(3,5,7,9, 11,13)]#
VPH.df$time <- as.POSIXct(as.character(vehicle.counts$endTime), format = "%m/%d/%y %I:%M %p")
vc.df <- data.frame(time = VPH.df$time, total = rowSums(VPH.df[1:6]))
vc.df
vph.x <- xts(x = vc.df$total, order.by = vc.df$time)
vph.x.s <- split(vph.x,f = "days")
vc.d <- data.frame(date = c(), time = c(), count = c())
i = vph.x.s[[1]]
for( i in vph.x.s) {
tmp <- downSample(i, 1, type = "count")
vc.d <- rbind(vc.d, data.frame(date = date(index(tmp)),
time=index(tmp),
count = coredata(tmp)))
}
tmp
vehicle.counts
VPH.df <- data.frame(endTime = vehicle.counts$endTime,
nBus = vehicle.counts[,3] + vehicle.counts[,4],
nCar = vehicle.counts[,5] + vehicle.counts[,6],
nLcv = vehicle.counts[,3] + vehicle.counts[,4],
n3wh = vehicle.counts[,3] + vehicle.counts[,4],
n2wh = vehicle.counts[,3] + vehicle.counts[,4])
VPH.df
VPH.df$time <- as.POSIXct(as.character(vehicle.counts$endTime), format = "%m/%d/%y %I:%M %p")
VPH.df
VPH.df <- VPH.df[,c(7,2,3,4,5,6)]
VPH.df
VPH.df$total = rowSums(VPH.df[,2:5])
VPH.df
vph.x <- xts(x = VPH.df$total, order.by = VPH.df$time)
vph.x.s <- split(vph.x,f = "days")
vc.d <- data.frame(date = c(), time = c(), count = c())
i = vph.x.s[[1]]
for( i in vph.x.s) {
tmp <- downSample(i, 1, type = "count")
vc.d <- rbind(vc.d, data.frame(date = date(index(tmp)),
time=index(tmp),
count = coredata(tmp)))
}
ggplot(vc.d)+geom_line(aes(x = time, y= count, color = date))
refTime <- VPH.df$time
avg_time = 1
df.seasonal <- data.frame(time = array(0, 24/avg_time), count = array(0, 24/avg_time))
refTime
sea
vc.d
vc.d$hour = hour(vc.d$time)
vc.d
VPH.df[vc.d$hour==1,3]
vc.d$hour==1
colSums(VPH.df[vc.d$hour==1,3])
VPH.df[vc.d$hour==1,3]
View(VPH.df)
for(i in 1:(24/avg_time)){
df.seasonal[i, 2] <- mean(VPH.df[vc.d$hour==1,3])
}
df.seasonal
for(i in 1:(24/avg_time)){
df.seasonal$count[i] <- mean(VPH.df[vc.d$hour==1,3])
}
df.seasonal
for(i in 1:(24/avg_time)){
df.seasonal$count[2,i] <- mean(VPH.df[vc.d$hour==1,3])
}
for(i in 1:(24/avg_time)){
df.seasonal$count[i,2] <- mean(VPH.df[vc.d$hour==1,3])
}
for(i in 1:(24/avg_time)){
df.seasonal$count[i] <- mean(VPH.df[vc.d$hour==1,3])
}
df.seasonal
df.seasonal <- data.frame(time = array(0, 24/avg_time), count = array(0, 24/avg_time))
df.seasonal
vc.d
for( i in vph.x.s) {
tmp <- downSample(i, 1, type = "count")
vc.d <- rbind(vc.d, data.frame(date = date(index(tmp)),
time=index(tmp),
count = coredata(tmp),
idx = 1:24))
}
vph.x <- xts(x = VPH.df$total, order.by = VPH.df$time)
vph.x.s <- split(vph.x,f = "days")
vc.d <- data.frame(date = c(), time = c(), count = c(), idx = c())
i = vph.x.s[[1]]
for( i in vph.x.s) {
tmp <- downSample(i, 1, type = "count")
vc.d <- rbind(vc.d, data.frame(date = date(index(tmp)),
time=index(tmp),
count = coredata(tmp),
idx = 1:24))
}
ggplot(vc.d)+geom_line(aes(x = time, y= count, color = date))
vc.d$hour = hour(vc.d$time)
refTime <- VPH.df$time
avg_time = 1
df.seasonal <- data.frame(time = array(0, 24/avg_time), count = array(0, 24/avg_time))
for(i in 1:(24/avg_time)){
df.seasonal$count[i] <- mean(VPH.df[vc.d$hour==i,3])
}
df.seasonal
for(i in 1:(24/avg_time)){
df.seasonal$count[i] <- mean(vc.d[vc.d$hour==i,3])
}
df.seasonal
vc.d
for(i in 1:(24/avg_time)){
df.seasonal$count[i] <- mean(vc.d[vc.d$idx==i,3])
}
df.seasonal <- data.frame(time = array(0, 24/avg_time), count = array(0, 24/avg_time))
for(i in 1:(24/avg_time)){
df.seasonal$count[i] <- mean(vc.d[vc.d$idx==i,3])
}
df.seasonal
plot(df.seasonal$count)
df.seasonal <- data.frame(time = array(0, 24/avg_time),
count = array(0, 24/avg_time),
qlow = array(0, 24/avg_time),
qhigh = array(0, 24/avg_time))
setwd("C:/Users/shrikanth yadav")
setwd("B:/Work/Robert Bosch Center/Sensor data/Time Series/repo")
main.R
knitr::opts_chunk$set(echo = FALSE)
library(png)
library(grid)
library(quantreg)
library(highfrequency)
library(TTR)
library(lubridate)
library(timeSeries)
library(dplyr)
library(ggplot2)
library("gridExtra")
library("cowplot")
theme_set(theme_grey())
library(reshape2)
library(scales)
source("src/TSA_source.R")
source("TSA_Data_Source.R")
source("src/plotting_functions.R")
C_data <- read.csv(file = 'Raw Sensor Data/Climo_co_corr_IISc_1_10.csv', header = TRUE, sep = ";")
cTime <-  as.POSIXct(C_data$Time)#(,"%Y-%m-%d %H:%M:%S", tz = "")
ws_c <- as.numeric(mean(diff(cTime)))*60 # sampling frequecy (seconds)
xts.c <- xts(x = C_data$Value, order.by = cTime)
daily_threshold <- floor(1170) # Expected number of samples per day
frequency_tolerance.c = 10
frequency_tolerance.w = 10
fault_window = "hours" # to identify faults in the data
std_tolerance = 0.01
folder = "plots"
dir.create("plots",showWarnings=FALSE,recursive=TRUE)
knitr::opts_chunk$set(echo = FALSE)
library(png)
library(grid)
library(quantreg)
library(highfrequency)
library(TTR)
library(lubridate)
library(timeSeries)
library(dplyr)
library(ggplot2)
library("gridExtra")
library("cowplot")
theme_set(theme_grey())
library(reshape2)
library(scales)
source("src/TSA_source.R")
source("TSA_Data_Source.R")
source("src/plotting_functions.R")
C_data <- read.csv(file = 'Raw Sensor Data/Climo_co_corr_IISc_1_10.csv', header = TRUE, sep = ";")
cTime <-  as.POSIXct(C_data$Time)#(,"%Y-%m-%d %H:%M:%S", tz = "")
ws_c <- as.numeric(mean(diff(cTime)))*60 # sampling frequecy (seconds)
xts.c <- xts(x = C_data$Value, order.by = cTime)
daily_threshold <- floor(1170) # Expected number of samples per day
frequency_tolerance.c = 10
frequency_tolerance.w = 10
fault_window = "hours" # to identify faults in the data
std_tolerance = 0.01
folder = "plots"
dir.create("plots",showWarnings=FALSE,recursive=TRUE)
avg_time = 1
# df.new <- get_ts_master_dataFrame('Raw Sensor Data/Wind_direction_corr_IISc_1_20.csv',
#                               'Raw Sensor Data/Climo_co_corr_IISc_1_10.csv',
#                               'Raw Sensor Data/Wind_speed_corr_IISc_1_20.csv',
#                               avg_time)
df.new <- getMasterdf_September(avg_time)
refTime <- as.POSIXct(df.new$time)
# Plot overall time series
plot.TS_Overall(xts.c, type = "CO Concentrations",folder = "plots")
# Plot Dataframe with fautly rows in red
plot.DF_faults(df.new,df.specs = "Carbon Monoxide", avg_time, folder = "plots")
df.new.clean <- df.new[complete.cases(df.new), ]
# df.new$desea <- df.new$conc - df.new$sea
df.new.1 <- df.new[df.new$wos==1, ]
xts.ds.w <- xts(df.new.1$wdir, order.by = refTime[1:length(df.new.1$wdir)])
plot(xts.ds.w, main = paste("Wind Directions Downsampled by ",as.character(avg_time*60),"min",sep=""))
hist(df.new$wdir, main = "Histogram of wind directions", xlab = "Angle w.r.t to North")
plot(df.new$temp, type = 'l')
df.sea.w <- getSeasonalData_August(1)
plot.All_seasonality(df.sea.w, type = "all")
plot.All_seasonality(df.sea.w, type = "overview")
plt_1 <- plot.weekQuantiles_Aug(avg_time, loc = "IISc")
plt_2 <- plot.weekQuantiles_Aug(avg_time, loc = "Electronic_City")
final <- plot_grid(plt_1, plt_2, ncol = 2,rel_widths = c(0.5,0.5))
df.specs = "Merge"
formats = c("PDF", "PNG")
plot.folder <- paste(folder,"/weekQuantiles_Aug/",sep="")
dir.create(plot.folder,showWarnings=FALSE,recursive=TRUE)
# record plot
#	print(data)
for(format in formats){
plot.filename <- paste(plot.folder,df.specs,".",format,sep="")
if(!is.na(format)){
if(format=="PDF")
pdf(file=plot.filename,bg="white")
else if(format=="PNG")
png(filename=plot.filename,width=800,height=800,units="px",pointsize=20,bg="white")
}
print(final) #suppressMessages(print(plt))
if(!is.na(format))
dev.off()
}
print(final)
avg_time = 1;
loc = "IISc"
folder = "plots"
formats=c("PDF", "PNG")
destfile=paste('TSA Cached data/sea_CO_aug_all_',loc,"_",
as.character(avg_time*60),'.csv', sep="")
if (!file.exists(destfile)) {
if(loc == "IISc"){
C_data <- read.csv(file = 'Raw Sensor Data/Climo_CO_23.csv', header = TRUE, sep = ";")
cTime <-  as.POSIXct(C_data$Time)#(,"%Y-%m-%d %H:%M:%S", tz = "")
}
else if(loc == "Electronic_City"){
C_data <- read.csv(file = 'Raw Sensor Data/ECity_Climo_CO_23.csv', header = TRUE, sep = ";")
cTime <-  as.POSIXct(C_data$Time)#(,"%Y-%m-%d %H:%M:%S", tz = "")
}
C_xts <- xts(x = C_data$Value, order.by = cTime)
# A list of lists storing data for each of the 38 days
days_summary <- removeAnomaly(C_xts)
day_h <- days_summary[[1]]
day_dict <- days_summary[[2]]
week_flag = min(day_h)
days_all<- split(C_xts, f = "days") # A list of lists storing data for each of the 38 days
days <- days_all[1:length(days_all)]
#
#     for(i in 1:7){
#       for(j in day_dict[[i]]){
#         print(length(days[[j]]))
#       }
#     }
data_summary <- getAverage_daily(days, day_dict, avg_time, week_flag, CI = -1)
seasonal_dow <- data_summary$average
data_summary <- getAverage_daily(days, day_dict, avg_time, week_flag, 0.95)
quantile_high <- data_summary$quantile_summ
data_summary <- getAverage_daily(days, day_dict, avg_time, week_flag, 0.05)
quantile_low <- data_summary$quantile_summ
df.master <- getLongDataFrame(seasonal_dow, quantile_high, quantile_low)
write.csv(df.master, file = destfile, row.names = FALSE)
}
df.master <- read.csv(file = destfile, header = TRUE, sep = ",")
df.master$Time <- as.POSIXct(df.master$Time)
df.master
i <- df.master
head(i)
levels(i$day)
levels(i$day) <- c("1", "2", "3", "4", "5", "6", "7")
plt <- ggplot(i, aes(x = Time, y = Concentrations, color = type )) +
geom_line(size = 0.5) + scale_x_datetime(date_labels = "%H")+theme_grey(base_size = 18)+
facet_wrap(.~ day, ncol = 2)+ylab('Conc. (ppm)')+
ylim(0,3.5) + xlab("Time of day (Hour)")+
labs(color = "") +
theme(legend.position="bottom", legend.box = "horizontal") +
theme(aspect.ratio = 0.67,legend.position=c(.73,.12),
legend.box = "horizontal",
legend.background = element_rect(fill=alpha(colour = "white", alpha = 0.1)))+
guides(color=guide_legend(direction = "horizontal",legend.text=element_text(size=18),nrow = 3))+
# theme(axis.ticks.length=unit(-0.25, "cm"))+
theme(axis.text.x = element_text(angle=0))#, legend.position = "bottom")
plt
plt
head(i)
df.master
head(df.master)
levels(i$day) <- c("6", "2", "7","1", "5", "3", "4")
plt <- ggplot(i, aes(x = Time, y = Concentrations, color = type )) +
geom_line(size = 0.5) + scale_x_datetime(date_labels = "%H")+theme_grey(base_size = 18)+
facet_wrap(.~ day, ncol = 2)+ylab('Conc. (ppm)')+
ylim(0,3.5) + xlab("Time of day (Hour)")+
labs(color = "") +
theme(legend.position="bottom", legend.box = "horizontal") +
theme(aspect.ratio = 0.67,legend.position=c(.73,.12),
legend.box = "horizontal",
legend.background = element_rect(fill=alpha(colour = "white", alpha = 0.1)))+
guides(color=guide_legend(direction = "horizontal",legend.text=element_text(size=18),nrow = 3))+
# theme(axis.ticks.length=unit(-0.25, "cm"))+
theme(axis.text.x = element_text(angle=0))#, legend.position = "bottom")
plt
head(i)
plt <- ggplot(i, aes(x = Time, y = Concentrations, color = type )) +
geom_line(size = 0.5) + scale_x_datetime(date_labels = "%H")+theme_grey(base_size = 18)+
facet_wrap(.~ day, ncol = 2)+ylab('Conc. (ppm)')+
ylim(0,3.5) + xlab("Time of day (Hour)")+
labs(color = "") +
theme(legend.position="bottom", legend.box = "horizontal") +
theme(aspect.ratio = 0.67,legend.position=c(.73,.12),
legend.box = "horizontal",
legend.background = element_rect(fill=alpha(colour = "white", alpha = 0.1)))+
guides(color=guide_legend(direction = "horizontal",legend.text=element_text(size=18),nrow = 3))+
# theme(axis.ticks.length=unit(-0.25, "cm"))+
theme(axis.text.x = element_text(angle=0))#, legend.position = "bottom")
plt
with(i, levels(day))
dat <- within(master.df, day <- factor(day, levels = c("6", "2", "7","1", "5", "3", "4")))
dat <- within(df.master, day <- factor(day, levels = c("6", "2", "7","1", "5", "3", "4")))
head(dat)
dat <- within(i, day <- factor(day, levels = c("6", "2", "7","1", "5", "3", "4")))
head(dat)
plt <- ggplot(i, aes(x = Time, y = Concentrations, color = type )) +
geom_line(size = 0.5) + scale_x_datetime(date_labels = "%H")+theme_grey(base_size = 18)+
facet_wrap(.~ day, ncol = 2)+ylab('Conc. (ppm)')+
ylim(0,3.5) + xlab("Time of day (Hour)")+
labs(color = "") +
theme(legend.position="bottom", legend.box = "horizontal") +
theme(aspect.ratio = 0.67,legend.position=c(.73,.12),
legend.box = "horizontal",
legend.background = element_rect(fill=alpha(colour = "white", alpha = 0.1)))+
guides(color=guide_legend(direction = "horizontal",legend.text=element_text(size=18),nrow = 3))+
# theme(axis.ticks.length=unit(-0.25, "cm"))+
theme(axis.text.x = element_text(angle=0))#, legend.position = "bottom")
plt
with(dat, levels(Group))
with(dat, levels(day))
levels(i$day)
levels(df.master$day)
plt <- ggplot(df.master, aes(x = Time, y = Concentrations, color = type )) +
geom_line(size = 0.5) + scale_x_datetime(date_labels = "%H")+theme_grey(base_size = 18)+
facet_wrap(.~ day, ncol = 2,levels=unique (day))+ylab('Conc. (ppm)')+
ylim(0,3.5) + xlab("Time of day (Hour)")+
labs(color = "") +
theme(legend.position="bottom", legend.box = "horizontal") +
theme(aspect.ratio = 0.67,legend.position=c(.73,.12),
legend.box = "horizontal",
legend.background = element_rect(fill=alpha(colour = "white", alpha = 0.1)))+
guides(color=guide_legend(direction = "horizontal",legend.text=element_text(size=18),nrow = 3))+
# theme(axis.ticks.length=unit(-0.25, "cm"))+
theme(axis.text.x = element_text(angle=0))#, legend.position = "bottom")
plt <- ggplot(df.master, aes(x = Time, y = Concentrations, color = type )) +
plt <- ggplot(df.master, aes(x = Time, y = Concentrations, color = type )) +
plt <- ggplot(df.master, aes(x = Time, y = Concentrations, color = type )) +
geom_line(size = 0.5) + scale_x_datetime(date_labels = "%H")+theme_grey(base_size = 18)+
facet_wrap(.~factor(day, levels=unique (day)), ncol = 2)+ylab('Conc. (ppm)')+
ylim(0,3.5) + xlab("Time of day (Hour)")+
labs(color = "") +
theme(legend.position="bottom", legend.box = "horizontal") +
theme(aspect.ratio = 0.67,legend.position=c(.73,.12),
legend.box = "horizontal",
legend.background = element_rect(fill=alpha(colour = "white", alpha = 0.1)))+
guides(color=guide_legend(direction = "horizontal",legend.text=element_text(size=18),nrow = 3))+
# theme(axis.ticks.length=unit(-0.25, "cm"))+
theme(axis.text.x = element_text(angle=0))#, legend.position = "bottom")
plt
source('B:/Work/Robert Bosch Center/Sensor data/Time Series/repo/src/plotting_functions.R')
plt_1 <- plot.weekQuantiles_Aug(avg_time, loc = "IISc")
plt_2 <- plot.weekQuantiles_Aug(avg_time, loc = "Electronic_City")
final <- plot_grid(plt_1, plt_2, ncol = 2,rel_widths = c(0.5,0.5))
df.specs = "Merge"
formats = c("PDF", "PNG")
plot.folder <- paste(folder,"/weekQuantiles_Aug/",sep="")
dir.create(plot.folder,showWarnings=FALSE,recursive=TRUE)
# record plot
#	print(data)
for(format in formats){
plot.filename <- paste(plot.folder,df.specs,".",format,sep="")
if(!is.na(format)){
if(format=="PDF")
pdf(file=plot.filename,bg="white")
else if(format=="PNG")
png(filename=plot.filename,width=800,height=800,units="px",pointsize=20,bg="white")
}
print(final) #suppressMessages(print(plt))
if(!is.na(format))
dev.off()
}
plt_1 <- plot.weekQuantiles_Aug(avg_time, loc = "IISc")
plt_2 <- plot.weekQuantiles_Aug(avg_time, loc = "Electronic_City")
setwd("B:/Work/Robert Bosch Center/Sensor data/Time Series/repo")
final <- plot_grid(plt_1, plt_2, ncol = 2,rel_widths = c(0.5,0.5))
df.specs = "Merge"
formats = c("PDF", "PNG")
plot.folder <- paste(folder,"/weekQuantiles_Aug/",sep="")
dir.create(plot.folder,showWarnings=FALSE,recursive=TRUE)
# record plot
#	print(data)
for(format in formats){
plot.filename <- paste(plot.folder,df.specs,".",format,sep="")
if(!is.na(format)){
if(format=="PDF")
pdf(file=plot.filename,bg="white")
else if(format=="PNG")
png(filename=plot.filename,width=800,height=800,units="px",pointsize=20,bg="white")
}
print(final) #suppressMessages(print(plt))
if(!is.na(format))
dev.off()
}
print(final)
knitr::opts_chunk$set(echo = FALSE)
library(png)
library(grid)
library(quantreg)
library(highfrequency)
library(TTR)
library(lubridate)
library(timeSeries)
library(dplyr)
library(ggplot2)
library("gridExtra")
library("cowplot")
theme_set(theme_grey())
library(reshape2)
library(scales)
source("src/TSA_source.R")
source("TSA_Data_Source.R")
source("src/plotting_functions.R")
C_data <- read.csv(file = 'Raw Sensor Data/Climo_co_corr_IISc_1_10.csv', header = TRUE, sep = ";")
cTime <-  as.POSIXct(C_data$Time)#(,"%Y-%m-%d %H:%M:%S", tz = "")
ws_c <- as.numeric(mean(diff(cTime)))*60 # sampling frequecy (seconds)
xts.c <- xts(x = C_data$Value, order.by = cTime)
daily_threshold <- floor(1170) # Expected number of samples per day
frequency_tolerance.c = 10
frequency_tolerance.w = 10
fault_window = "hours" # to identify faults in the data
std_tolerance = 0.01
folder = "plots"
dir.create("plots",showWarnings=FALSE,recursive=TRUE)
avg_time = 1
# df.new <- get_ts_master_dataFrame('Raw Sensor Data/Wind_direction_corr_IISc_1_20.csv',
#                               'Raw Sensor Data/Climo_co_corr_IISc_1_10.csv',
#                               'Raw Sensor Data/Wind_speed_corr_IISc_1_20.csv',
#                               avg_time)
df.new <- getMasterdf_September(avg_time)
refTime <- as.POSIXct(df.new$time)
# Plot overall time series
plot.TS_Overall(xts.c, type = "CO Concentrations",folder = "plots")
# Plot Dataframe with fautly rows in red
plot.DF_faults(df.new,df.specs = "Carbon Monoxide", avg_time, folder = "plots")
df.new.clean <- df.new[complete.cases(df.new), ]
# df.new$desea <- df.new$conc - df.new$sea
df.new.1 <- df.new[df.new$wos==1, ]
xts.ds.w <- xts(df.new.1$wdir, order.by = refTime[1:length(df.new.1$wdir)])
plot(xts.ds.w, main = paste("Wind Directions Downsampled by ",as.character(avg_time*60),"min",sep=""))
hist(df.new$wdir, main = "Histogram of wind directions", xlab = "Angle w.r.t to North")
plot(df.new$temp, type = 'l')
df.sea.w <- getSeasonalData_August(1)
plot.All_seasonality(df.sea.w, type = "all")
plot.All_seasonality(df.sea.w, type = "overview")
plt_1 <- plot.weekQuantiles_Aug(avg_time, loc = "IISc")
plt_2 <- plot.weekQuantiles_Aug(avg_time, loc = "Electronic_City")
final <- plot_grid(plt_1, plt_2, ncol = 2,rel_widths = c(0.5,0.5))
df.specs = "Merge"
formats = c("PDF", "PNG")
plot.folder <- paste(folder,"/weekQuantiles_Aug/",sep="")
dir.create(plot.folder,showWarnings=FALSE,recursive=TRUE)
# record plot
#	print(data)
for(format in formats){
plot.filename <- paste(plot.folder,df.specs,".",format,sep="")
if(!is.na(format)){
if(format=="PDF")
pdf(file=plot.filename,bg="white")
else if(format=="PNG")
png(filename=plot.filename,width=800,height=800,units="px",pointsize=20,bg="white")
}
print(final) #suppressMessages(print(plt))
if(!is.na(format))
dev.off()
}
print(final)
